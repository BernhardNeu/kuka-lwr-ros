# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lwr_controllers/FF_FB_plan.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy
import std_msgs.msg

class FF_FB_plan(genpy.Message):
  _md5sum = "a96cb59a5005197cccc1498c4103c512"
  _type = "lwr_controllers/FF_FB_plan"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Time[] times
geometry_msgs/Wrench[] ff
geometry_msgs/Pose[] xd
geometry_msgs/Twist[] xd_dot
std_msgs/Float64MultiArray[] fb

================================================================================
MSG: std_msgs/Time
time data

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: std_msgs/Float64MultiArray
# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

MultiArrayLayout  layout        # specification of data layout
float64[]         data          # array of data


================================================================================
MSG: std_msgs/MultiArrayLayout
# The multiarray declares a generic multi-dimensional array of a
# particular data type.  Dimensions are ordered from outer most
# to inner most.

MultiArrayDimension[] dim # Array of dimension properties
uint32 data_offset        # padding elements at front of data

# Accessors should ALWAYS be written in terms of dimension stride
# and specified outer-most dimension first.
# 
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]
#
# A standard, 3-channel 640x480 image with interleaved color channels
# would be specified as:
#
# dim[0].label  = "height"
# dim[0].size   = 480
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
# dim[1].label  = "width"
# dim[1].size   = 640
# dim[1].stride = 3*640 = 1920
# dim[2].label  = "channel"
# dim[2].size   = 3
# dim[2].stride = 3
#
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.

================================================================================
MSG: std_msgs/MultiArrayDimension
string label   # label of given dimension
uint32 size    # size of given dimension (in type units)
uint32 stride  # stride of given dimension"""
  __slots__ = ['times','ff','xd','xd_dot','fb']
  _slot_types = ['std_msgs/Time[]','geometry_msgs/Wrench[]','geometry_msgs/Pose[]','geometry_msgs/Twist[]','std_msgs/Float64MultiArray[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       times,ff,xd,xd_dot,fb

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FF_FB_plan, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.times is None:
        self.times = []
      if self.ff is None:
        self.ff = []
      if self.xd is None:
        self.xd = []
      if self.xd_dot is None:
        self.xd_dot = []
      if self.fb is None:
        self.fb = []
    else:
      self.times = []
      self.ff = []
      self.xd = []
      self.xd_dot = []
      self.fb = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.times)
      buff.write(_struct_I.pack(length))
      for val1 in self.times:
        _v1 = val1.data
        _x = _v1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      length = len(self.ff)
      buff.write(_struct_I.pack(length))
      for val1 in self.ff:
        _v2 = val1.force
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = val1.torque
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.xd)
      buff.write(_struct_I.pack(length))
      for val1 in self.xd:
        _v4 = val1.position
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = val1.orientation
        _x = _v5
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.xd_dot)
      buff.write(_struct_I.pack(length))
      for val1 in self.xd_dot:
        _v6 = val1.linear
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = val1.angular
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.fb)
      buff.write(_struct_I.pack(length))
      for val1 in self.fb:
        _v8 = val1.layout
        length = len(_v8.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v8.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_2I().pack(_x.size, _x.stride))
        buff.write(_get_struct_I().pack(_v8.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.times is None:
        self.times = None
      if self.ff is None:
        self.ff = None
      if self.xd is None:
        self.xd = None
      if self.xd_dot is None:
        self.xd_dot = None
      if self.fb is None:
        self.fb = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.times = []
      for i in range(0, length):
        val1 = std_msgs.msg.Time()
        _v9 = val1.data
        _x = _v9
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.times.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ff = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v10 = val1.force
        _x = _v10
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v11 = val1.torque
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.ff.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.xd = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v12 = val1.position
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v13 = val1.orientation
        _x = _v13
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.xd.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.xd_dot = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v14 = val1.linear
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v15 = val1.angular
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.xd_dot.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fb = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float64MultiArray()
        _v16 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v16.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
          _v16.dim.append(val3)
        start = end
        end += 4
        (_v16.data_offset,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = struct.unpack(pattern, str[start:end])
        self.fb.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.times)
      buff.write(_struct_I.pack(length))
      for val1 in self.times:
        _v17 = val1.data
        _x = _v17
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
      length = len(self.ff)
      buff.write(_struct_I.pack(length))
      for val1 in self.ff:
        _v18 = val1.force
        _x = _v18
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v19 = val1.torque
        _x = _v19
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.xd)
      buff.write(_struct_I.pack(length))
      for val1 in self.xd:
        _v20 = val1.position
        _x = _v20
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v21 = val1.orientation
        _x = _v21
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.xd_dot)
      buff.write(_struct_I.pack(length))
      for val1 in self.xd_dot:
        _v22 = val1.linear
        _x = _v22
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v23 = val1.angular
        _x = _v23
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.fb)
      buff.write(_struct_I.pack(length))
      for val1 in self.fb:
        _v24 = val1.layout
        length = len(_v24.dim)
        buff.write(_struct_I.pack(length))
        for val3 in _v24.dim:
          _x = val3.label
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_2I().pack(_x.size, _x.stride))
        buff.write(_get_struct_I().pack(_v24.data_offset))
        length = len(val1.data)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.times is None:
        self.times = None
      if self.ff is None:
        self.ff = None
      if self.xd is None:
        self.xd = None
      if self.xd_dot is None:
        self.xd_dot = None
      if self.fb is None:
        self.fb = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.times = []
      for i in range(0, length):
        val1 = std_msgs.msg.Time()
        _v25 = val1.data
        _x = _v25
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        self.times.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ff = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Wrench()
        _v26 = val1.force
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v27 = val1.torque
        _x = _v27
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.ff.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.xd = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v28 = val1.position
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v29 = val1.orientation
        _x = _v29
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.xd.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.xd_dot = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Twist()
        _v30 = val1.linear
        _x = _v30
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v31 = val1.angular
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.xd_dot.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fb = []
      for i in range(0, length):
        val1 = std_msgs.msg.Float64MultiArray()
        _v32 = val1.layout
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v32.dim = []
        for i in range(0, length):
          val3 = std_msgs.msg.MultiArrayDimension()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val3.label = str[start:end].decode('utf-8')
          else:
            val3.label = str[start:end]
          _x = val3
          start = end
          end += 8
          (_x.size, _x.stride,) = _get_struct_2I().unpack(str[start:end])
          _v32.dim.append(val3)
        start = end
        end += 4
        (_v32.data_offset,) = _get_struct_I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        self.fb.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d

// Generated by gencpp from file vtec_msgs/TrackingResult.msg
// DO NOT EDIT!


#ifndef VTEC_MSGS_MESSAGE_TRACKINGRESULT_H
#define VTEC_MSGS_MESSAGE_TRACKINGRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace vtec_msgs
{
template <class ContainerAllocator>
struct TrackingResult_
{
  typedef TrackingResult_<ContainerAllocator> Type;

  TrackingResult_()
    : header()
    , score(0.0)
    , homography()
    , alpha(0.0)
    , beta(0.0)
    , corners()  {
      homography.assign(0.0);
  }
  TrackingResult_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , score(0.0)
    , homography()
    , alpha(0.0)
    , beta(0.0)
    , corners()  {
  (void)_alloc;
      homography.assign(0.0);

      corners.assign( ::geometry_msgs::Point_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _score_type;
  _score_type score;

   typedef boost::array<float, 9>  _homography_type;
  _homography_type homography;

   typedef float _alpha_type;
  _alpha_type alpha;

   typedef float _beta_type;
  _beta_type beta;

   typedef boost::array< ::geometry_msgs::Point_<ContainerAllocator> , 4>  _corners_type;
  _corners_type corners;





  typedef boost::shared_ptr< ::vtec_msgs::TrackingResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vtec_msgs::TrackingResult_<ContainerAllocator> const> ConstPtr;

}; // struct TrackingResult_

typedef ::vtec_msgs::TrackingResult_<std::allocator<void> > TrackingResult;

typedef boost::shared_ptr< ::vtec_msgs::TrackingResult > TrackingResultPtr;
typedef boost::shared_ptr< ::vtec_msgs::TrackingResult const> TrackingResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vtec_msgs::TrackingResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vtec_msgs::TrackingResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vtec_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'vtec_msgs': ['/home/robotlab/catkin_ws/src/vtec_ros/vtec_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vtec_msgs::TrackingResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vtec_msgs::TrackingResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vtec_msgs::TrackingResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vtec_msgs::TrackingResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vtec_msgs::TrackingResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vtec_msgs::TrackingResult_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vtec_msgs::TrackingResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7102c9ac7d706a3777e6c6a896f18cf7";
  }

  static const char* value(const ::vtec_msgs::TrackingResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7102c9ac7d706a37ULL;
  static const uint64_t static_value2 = 0x77e6c6a896f18cf7ULL;
};

template<class ContainerAllocator>
struct DataType< ::vtec_msgs::TrackingResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vtec_msgs/TrackingResult";
  }

  static const char* value(const ::vtec_msgs::TrackingResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vtec_msgs::TrackingResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float64 score\n\
float32[9] homography\n\
float32 alpha\n\
float32 beta\n\
geometry_msgs/Point[4] corners\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::vtec_msgs::TrackingResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vtec_msgs::TrackingResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.score);
      stream.next(m.homography);
      stream.next(m.alpha);
      stream.next(m.beta);
      stream.next(m.corners);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackingResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vtec_msgs::TrackingResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vtec_msgs::TrackingResult_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "homography[]" << std::endl;
    for (size_t i = 0; i < v.homography.size(); ++i)
    {
      s << indent << "  homography[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.homography[i]);
    }
    s << indent << "alpha: ";
    Printer<float>::stream(s, indent + "  ", v.alpha);
    s << indent << "beta: ";
    Printer<float>::stream(s, indent + "  ", v.beta);
    s << indent << "corners[]" << std::endl;
    for (size_t i = 0; i < v.corners.size(); ++i)
    {
      s << indent << "  corners[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.corners[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VTEC_MSGS_MESSAGE_TRACKINGRESULT_H

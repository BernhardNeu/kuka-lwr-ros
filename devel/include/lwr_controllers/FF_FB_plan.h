// Generated by gencpp from file lwr_controllers/FF_FB_plan.msg
// DO NOT EDIT!


#ifndef LWR_CONTROLLERS_MESSAGE_FF_FB_PLAN_H
#define LWR_CONTROLLERS_MESSAGE_FF_FB_PLAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Time.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/Float64MultiArray.h>

namespace lwr_controllers
{
template <class ContainerAllocator>
struct FF_FB_plan_
{
  typedef FF_FB_plan_<ContainerAllocator> Type;

  FF_FB_plan_()
    : times()
    , ff()
    , xd()
    , xd_dot()
    , fb()  {
    }
  FF_FB_plan_(const ContainerAllocator& _alloc)
    : times(_alloc)
    , ff(_alloc)
    , xd(_alloc)
    , xd_dot(_alloc)
    , fb(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::std_msgs::Time_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Time_<ContainerAllocator> >::other >  _times_type;
  _times_type times;

   typedef std::vector< ::geometry_msgs::Wrench_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Wrench_<ContainerAllocator> >::other >  _ff_type;
  _ff_type ff;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _xd_type;
  _xd_type xd;

   typedef std::vector< ::geometry_msgs::Twist_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Twist_<ContainerAllocator> >::other >  _xd_dot_type;
  _xd_dot_type xd_dot;

   typedef std::vector< ::std_msgs::Float64MultiArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::other >  _fb_type;
  _fb_type fb;





  typedef boost::shared_ptr< ::lwr_controllers::FF_FB_plan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lwr_controllers::FF_FB_plan_<ContainerAllocator> const> ConstPtr;

}; // struct FF_FB_plan_

typedef ::lwr_controllers::FF_FB_plan_<std::allocator<void> > FF_FB_plan;

typedef boost::shared_ptr< ::lwr_controllers::FF_FB_plan > FF_FB_planPtr;
typedef boost::shared_ptr< ::lwr_controllers::FF_FB_plan const> FF_FB_planConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lwr_controllers::FF_FB_plan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lwr_controllers::FF_FB_plan_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lwr_controllers

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'lwr_controllers': ['/home/robotlab/catkin_ws/src/kuka-lwr-ros/kuka_lwr/lwr_controllers/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lwr_controllers::FF_FB_plan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lwr_controllers::FF_FB_plan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lwr_controllers::FF_FB_plan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lwr_controllers::FF_FB_plan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lwr_controllers::FF_FB_plan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lwr_controllers::FF_FB_plan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lwr_controllers::FF_FB_plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a96cb59a5005197cccc1498c4103c512";
  }

  static const char* value(const ::lwr_controllers::FF_FB_plan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa96cb59a5005197cULL;
  static const uint64_t static_value2 = 0xccc1498c4103c512ULL;
};

template<class ContainerAllocator>
struct DataType< ::lwr_controllers::FF_FB_plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lwr_controllers/FF_FB_plan";
  }

  static const char* value(const ::lwr_controllers::FF_FB_plan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lwr_controllers::FF_FB_plan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Time[] times\n\
geometry_msgs/Wrench[] ff\n\
geometry_msgs/Pose[] xd\n\
geometry_msgs/Twist[] xd_dot\n\
std_msgs/Float64MultiArray[] fb\n\
\n\
================================================================================\n\
MSG: std_msgs/Time\n\
time data\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Wrench\n\
# This represents force in free space, separated into\n\
# its linear and angular parts.\n\
Vector3  force\n\
Vector3  torque\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: std_msgs/Float64MultiArray\n\
# Please look at the MultiArrayLayout message definition for\n\
# documentation on all multiarrays.\n\
\n\
MultiArrayLayout  layout        # specification of data layout\n\
float64[]         data          # array of data\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayLayout\n\
# The multiarray declares a generic multi-dimensional array of a\n\
# particular data type.  Dimensions are ordered from outer most\n\
# to inner most.\n\
\n\
MultiArrayDimension[] dim # Array of dimension properties\n\
uint32 data_offset        # padding elements at front of data\n\
\n\
# Accessors should ALWAYS be written in terms of dimension stride\n\
# and specified outer-most dimension first.\n\
# \n\
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n\
#\n\
# A standard, 3-channel 640x480 image with interleaved color channels\n\
# would be specified as:\n\
#\n\
# dim[0].label  = \"height\"\n\
# dim[0].size   = 480\n\
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n\
# dim[1].label  = \"width\"\n\
# dim[1].size   = 640\n\
# dim[1].stride = 3*640 = 1920\n\
# dim[2].label  = \"channel\"\n\
# dim[2].size   = 3\n\
# dim[2].stride = 3\n\
#\n\
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayDimension\n\
string label   # label of given dimension\n\
uint32 size    # size of given dimension (in type units)\n\
uint32 stride  # stride of given dimension\n\
";
  }

  static const char* value(const ::lwr_controllers::FF_FB_plan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lwr_controllers::FF_FB_plan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.times);
      stream.next(m.ff);
      stream.next(m.xd);
      stream.next(m.xd_dot);
      stream.next(m.fb);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FF_FB_plan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lwr_controllers::FF_FB_plan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lwr_controllers::FF_FB_plan_<ContainerAllocator>& v)
  {
    s << indent << "times[]" << std::endl;
    for (size_t i = 0; i < v.times.size(); ++i)
    {
      s << indent << "  times[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Time_<ContainerAllocator> >::stream(s, indent + "    ", v.times[i]);
    }
    s << indent << "ff[]" << std::endl;
    for (size_t i = 0; i < v.ff.size(); ++i)
    {
      s << indent << "  ff[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "    ", v.ff[i]);
    }
    s << indent << "xd[]" << std::endl;
    for (size_t i = 0; i < v.xd.size(); ++i)
    {
      s << indent << "  xd[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.xd[i]);
    }
    s << indent << "xd_dot[]" << std::endl;
    for (size_t i = 0; i < v.xd_dot.size(); ++i)
    {
      s << indent << "  xd_dot[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "    ", v.xd_dot[i]);
    }
    s << indent << "fb[]" << std::endl;
    for (size_t i = 0; i < v.fb.size(); ++i)
    {
      s << indent << "  fb[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.fb[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LWR_CONTROLLERS_MESSAGE_FF_FB_PLAN_H
